"""
Django settings for common project.

Generated by 'django-admin startproject' using Django 5.1.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import os
import logging.config

from corsheaders.defaults import default_headers
from environment.variables import EnvironmentVariable

# List of available environments
ENVIRONMENT_MAIN = "MAIN"


# Defining Environment
def set_environment(environment):
    if environment == ENVIRONMENT_MAIN:
        os.environ.setdefault("DJANGO_SETTINGS_MODULE", "environment.main")


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-36-%@*i+c3j%5npui3x9p-xts#-zm939mcovo+1%pv$n_706gm'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # Custom Packages
    'rest_framework',
    'rest_framework_simplejwt',
    'corsheaders',
    'django.contrib.sites',
    'storages',
    # Apps
    'user',
]

AUTH_USER_MODEL = 'user.User'

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.AllowAny',
        'rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly'
    ],
    'DEFAULT_SCHEMA_CLASS': 'rest_framework.schemas.coreapi.AutoSchema'
}

ROOT_URLCONF = 'common.urls'
CORS_ALLOW_HEADERS = list(default_headers) + [
    'Content-Disposition',
    'X-Api-Key',
    'X-Forwarded-Host',
    'X-Forwarded-Proto',
    'X-Api-Auth-Key',
    'referer',
    'region',
]
CORS_ALLOW_ALL_ORIGINS = True
CORS_ORIGIN_ALLOW_ALL = True
CORS_ALLOW_CREDENTIALS = True



CORS_ALLOWED_ORIGINS = [
    'http://localhost:3000',
    'http://localhost:8080',
    'http://localhost',
    #aws
    # 'http://crrms-dev.s3-website-us-east-1.amazonaws.com'
    # 'http://127.0.0.1:8000/'
]

CSRF_TRUSTED_ORIGINS =  [
    #local
    'http://127.0.0.1:8000',
    'http://localhost:3000',
    'http://localhost:8080',
    'http://localhost',
    #aws
    # 'http://crrms-dev.s3-website-us-east-1.amazonaws.com',
]

CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'default-cache',
    },
    'docusign': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'docusign-cache',
    },
}

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
            'libraries': {
                'staticfiles': 'django.templatetags.static',
            },
        },
    },
]

WSGI_APPLICATION = 'common.wsgi.application'

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_ROOT = os.path.join(BASE_DIR, 'static')
STATIC_URL = '/static/'
# STATICFILES_DIRS = (os.path.join(BASE_DIR, 'static_files'),)
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

SITE_ID = 1
ACCOUNT_EMAIL_VERIFICATION = "none"  # Can be "mandatory" if you want email verification
ACCOUNT_AUTHENTICATION_METHOD = "email"  # Use email for authentication
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_USER_MODEL_USERNAME_FIELD = None  # Use email as the main field
ACCOUNT_USERNAME_REQUIRED = False  # Skip username requirement
ACCOUNT_SIGNUP_PASSWORD_ENTER_TWICE = False
ACCOUNT_LOGIN_ON_EMAIL_CONFIRMATION = True  # Auto-login after email verification

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

logging.config.dictConfig({

    # Logger configuration dictionary
    'version': 1,

    # disabling the django default logger to have a customized logger
    'disable_existing_loggers': False,

    'formatters': {
        'console': {
            'format': '%(name)-12s %(levelname)-8s %(message)s'
        },
        'success': {
            'format': "[%(asctime)s] -| LOG STATUS - %(levelname)s"
                      " -| METHOD - %(method)s"
                      " -| USER - %(user)s"
                      " -| FETCH_URL - %(url)s"
                      " -| MESSAGE - %(log_message)s"
                      " -| STATUS - %(status)s"
        },
        'failure': {
            'format': "[%(asctime)s] -| LOG STATUS - %(levelname)s"
                      " -| METHOD - %(method)s"
                      " -| USER - %(user)s"
                      " -| FETCH_URL - %(url)s"
                      " -| REQUEST DATA - %(request_data)s"
                      " -| RESPONSE - %(response_data)s"
                      " -| ERROR_MESSAGE - %(log_message)s"
                      " -| STATUS - %(status)s"
                      " -| FILE_NAME - %(file_name)s"
                      " -| LINE_NO - %(line_no)s"
        },
    },

    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'console'
        },
        'success': {
            'class': 'logging.StreamHandler',
            'formatter': 'success'
        },
        'failure': {
            'class': 'logging.StreamHandler',
            'formatter': 'failure'
        },
        'success-file': {
            'class': 'logging.handlers.TimedRotatingFileHandler',
            'formatter': 'success',
            'when': 'midnight',
            'interval': 1,
            'filename': 'logs/success-logs',
        },
        'failure-file': {
            'class': 'logging.handlers.TimedRotatingFileHandler',
            'formatter': 'failure',
            'when': 'midnight',
            'interval': 1,
            'filename': 'logs/error-logs',
        }
    },

    'loggers': {
        'success': {
            'level': 'INFO',
            'handlers': ['success', 'success-file']
        },
        'failure': {
            'level': 'ERROR',
            'handlers': ['failure', 'failure-file']
        }
    }
})

# CALENDAR_AUTHORIZE_URL="http://localhost:8000/api/calendar/oauth2callback"
# CALENDAR_CREDENTIAL_PATH="credentials.json"
